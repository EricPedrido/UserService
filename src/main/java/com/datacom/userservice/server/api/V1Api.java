/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.datacom.userservice.server.api;

import com.datacom.userservice.server.model.Error;
import com.datacom.userservice.server.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-04-13T17:49:44.674+12:00[Pacific/Auckland]")
@Validated
@Api(value = "v1", description = "the v1 API")
public interface V1Api {

    default V1ApiDelegate getDelegate() {
        return new V1ApiDelegate() {};
    }

    /**
     * POST /v1/users : Creates a new user.
     *
     * @param user A user request. (required)
     * @param target  (optional)
     * @return The user was created successfully. (status code 201)
     *         or An unexpected error occurred. (status code 400)
     */
    @ApiOperation(value = "Creates a new user.", nickname = "create", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The user was created successfully."),
        @ApiResponse(code = 400, message = "An unexpected error occurred.", response = Error.class) })
    @PostMapping(
        value = "/v1/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> create(@ApiParam(value = "A user request." ,required=true )  @Valid @RequestBody User user,@ApiParam(value = "") @Valid @RequestParam(value = "target", required = false) String target) {
        return getDelegate().create(user, target);
    }


    /**
     * DELETE /v1/users/{email} : Delete an existing user.
     *
     * @param email User email. (required)
     * @param target  (optional)
     * @return The user was deleted successfully. (status code 204)
     *         or An unexpected error occurred. (status code 400)
     */
    @ApiOperation(value = "Delete an existing user.", nickname = "delete", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The user was deleted successfully."),
        @ApiResponse(code = 400, message = "An unexpected error occurred.", response = Error.class) })
    @DeleteMapping(
        value = "/v1/users/{email}",
        produces = { "application/json" }
    )
    default ResponseEntity<Void> delete(@Email@ApiParam(value = "User email.",required=true) @PathVariable("email") String email, @ApiParam(value = "") @Valid @RequestParam(value = "target", required = false) String target) {
        return getDelegate().delete(email, target);
    }


    /**
     * GET /v1/users/{email} : Retrieve an existing user.
     *
     * @param email User email. (required)
     * @param target  (optional)
     * @return A user response. (status code 200)
     *         or An unexpected error occurred. (status code 400)
     *         or An unexpected error occurred. (status code 404)
     */
    @ApiOperation(value = "Retrieve an existing user.", nickname = "retrieve", notes = "", response = User.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "A user response.", response = User.class),
        @ApiResponse(code = 400, message = "An unexpected error occurred.", response = Error.class),
        @ApiResponse(code = 404, message = "An unexpected error occurred.", response = Error.class) })
    @GetMapping(
        value = "/v1/users/{email}",
        produces = { "application/json" }
    )
    default ResponseEntity<User> retrieve(@Email@ApiParam(value = "User email.",required=true) @PathVariable("email") String email, @ApiParam(value = "") @Valid @RequestParam(value = "target", required = false) String target) {
        return getDelegate().retrieve(email, target);
    }


    /**
     * PUT /v1/users/{email} : Update an existing user.
     *
     * @param email User email. (required)
     * @param user A user request. (required)
     * @param target  (optional)
     * @return The user was updated successfully. (status code 204)
     *         or An unexpected error occurred. (status code 400)
     *         or An unexpected error occurred. (status code 404)
     */
    @ApiOperation(value = "Update an existing user.", nickname = "update", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The user was updated successfully."),
        @ApiResponse(code = 400, message = "An unexpected error occurred.", response = Error.class),
        @ApiResponse(code = 404, message = "An unexpected error occurred.", response = Error.class) })
    @PutMapping(
        value = "/v1/users/{email}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> update(@Email@ApiParam(value = "User email.",required=true) @PathVariable("email") String email, @ApiParam(value = "A user request." ,required=true )  @Valid @RequestBody User user, @ApiParam(value = "") @Valid @RequestParam(value = "target", required = false) String target) {
        return getDelegate().update(email, user, target);
    }

}
